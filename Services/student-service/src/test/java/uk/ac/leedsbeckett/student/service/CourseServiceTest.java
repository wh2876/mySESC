package uk.ac.leedsbeckett.student.service;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import uk.ac.leedsbeckett.student.model.Course;
import uk.ac.leedsbeckett.student.model.CourseRepository;

import java.util.*;

import static org.junit.jupiter.api.Assertions.*;

@ExtendWith(MockitoExtension.class)
class CourseServiceTest {

    @Mock
    private CourseRepository courseRepository;

    @InjectMocks
    private CourseService courseService;

    private Course testCourse;

    @BeforeEach
    void setUp() {
        testCourse = new Course();
        testCourse.setId(1L);
        testCourse.setFee(10.0);
        testCourse.setTitle("Test Course");
        testCourse.setDescription("Test Description");
        testCourse.setStudentsEnrolledInCourse(Collections.emptySet());
        Mockito.when(courseRepository.save(Mockito.any(Course.class))).thenReturn(new Course());
        courseRepository.save(testCourse);
    }

    @AfterEach
    void tearDown() {
        testCourse = null;
        courseRepository.deleteAll();
    }

    @Test
    void getAllCourses() {
        //make sure the repo returns what it should
        Mockito.when(courseRepository.findAll()).thenReturn(Collections.singletonList(testCourse));

        assertEquals(Collections.singletonList(testCourse), courseService.getAllCourses());
    }

    @Test
    void getCourseById() {
        Mockito.when(courseRepository.findById(1L)).thenReturn(Optional.ofNullable(testCourse));

        assertEquals(testCourse, courseService.getCourseById(1L));
        assertThrows(RuntimeException.class, () -> courseService.getCourseById(2L));
    }

    @Test
    void createNewCourse() {
        Mockito.when(courseRepository.save(Mockito.any(Course.class))).thenReturn(testCourse);

        assertEquals(testCourse, courseService.createNewCourse(testCourse));

        //then verify invalid courses cannot be created
        assertThrows(RuntimeException.class, () -> courseService.createNewCourse(null));
        //not sure exactly how much to test here,
        // course could be invalid in a variety of ways,
        // so this section really is just validating the courseIsValid() method
        // but of course since it is called in this method,
        // we need to verify that invalid courses are handled properly
        testCourse.setStudentsEnrolledInCourse(null);
        assertFalse(courseService.courseIsValid(testCourse));
        assertThrows(RuntimeException.class, () -> courseService.createNewCourse(testCourse));

    }

    @Test
    void editCourse() {
        Mockito.when(courseRepository.findById(1L)).thenReturn(Optional.ofNullable(testCourse));

        testCourse.setFee(20.0);
        Mockito.when(courseRepository.save(Mockito.any(Course.class))).thenReturn(testCourse);

        assertEquals(testCourse, courseService.editCourse(1L, testCourse));

        //another courseIsValid() handling test, might be unnecessary
        testCourse.setFee(null);
        assertThrows(RuntimeException.class, () -> courseService.editCourse(1L, testCourse));
    }

    @Test
    void courseIsValid() {
        assertTrue(courseService.courseIsValid(testCourse));
        assertFalse(courseService.courseIsValid(null));

        testCourse.setFee(null);
        assertFalse(courseService.courseIsValid(testCourse));
        testCourse.setFee(10.0);

        testCourse.setTitle(null);
        assertFalse(courseService.courseIsValid(testCourse));
        testCourse.setTitle("Test Course");

        testCourse.setDescription(null);
        assertFalse(courseService.courseIsValid(testCourse));
        testCourse.setDescription("Test Description");

        testCourse.setStudentsEnrolledInCourse(null);
        assertFalse(courseService.courseIsValid(testCourse));
        testCourse.setStudentsEnrolledInCourse(Collections.emptySet());

        //should be valid because:
        // only courses with IDs will be in the repo
        // i.e. the only courses with null ids will be being added to the repo
        // this is no problem since id is autogenerated when being added to the repo
        testCourse.setId(null);
        assertTrue(courseService.courseIsValid(testCourse));
    }
}